generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Movie {
  id_movie Int @id @default(autoincrement())

  // Campos integrados con TMDB
  title             String  @unique(map: "Movie_title_idx") @db.VarChar(200)
  description       String? @db.VarChar(1000)
  duration          Int
  release_date      Int
  averageScore      Decimal? @db.Decimal(3, 2) // puntuacion propia (0-5)
  totalReviews      Int?     @default(0) 
  // Campos adicionales de TMDB
  tmdb_id           Int?    @unique // ID de TMDB para sincronización
  rating            Float?  @default(0) // vote_average de TMDB (0-10)
  poster_path       String? @db.VarChar(500)
  backdrop_path     String? @db.VarChar(500)
  original_language String? @db.VarChar(10)
  vote_count        Int?    @default(0)
  popularity        Float?  @default(0)
  adult             Boolean @default(false)

  id_director Int
  id_category Int

  created_at  DateTime?     @default(now()) @db.Timestamp(6)
  updated_at  DateTime?     @default(now()) @db.Timestamp(6)
  Favorite    Favorite[]
  Movie_Actor Movie_Actor[]
  Review      Review[]

  Category Category @relation(fields: [id_category], references: [id_category], onDelete: NoAction, onUpdate: NoAction)
  Director Director @relation(fields: [id_director], references: [id_director], onDelete: NoAction, onUpdate: NoAction)
}

model Category {
  id_category Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50) // nombre del género de TMDB
  description String? // descripción generada
  tmdb_id     Int?      @unique // ID de género en TMDB para sincronización
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  Movie       Movie[]
}

model Director {
  id_director  Int       @id @default(autoincrement())
  first_name   String    @db.VarChar(100)
  last_name    String    @db.VarChar(100)
  nationality  String?   @db.VarChar(50) // extraído de place_of_birth
  // Campos adicionales integrados de TMDB
  tmdb_id      Int?      @unique // ID de persona en TMDB
  profile_path String?   @db.VarChar(500)
  biography    String?   @db.Text
  birth_date   DateTime? @db.Date
  birth_place  String?   @db.VarChar(200)
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  Movie        Movie[]

  @@unique([first_name, last_name], map: "Director_first_name_last_name_idx")
}

model Actor {
  id_actor     Int           @id @default(autoincrement())
  first_name   String        @db.VarChar(100)
  last_name    String        @db.VarChar(100)
  birth_date   DateTime?     @db.Date
  // Campos adicionales integrados de TMDB
  tmdb_id      Int?          @unique // ID de persona en TMDB
  profile_path String?       @db.VarChar(500)
  biography    String?       @db.Text
  birth_place  String?       @db.VarChar(200)
  gender       Int? // 1 = femenino, 2 = masculino, 0 = no especificado
  created_at   DateTime?     @default(now()) @db.Timestamp(6)
  Movie_Actor  Movie_Actor[]

  @@index([first_name, last_name])
}

model Favorite {
  id_user    String
  id_movie   Int
  created_at DateTime? @default(now()) @db.Timestamp(6)
  Movie      Movie     @relation(fields: [id_movie], references: [id_movie], onDelete: NoAction, onUpdate: NoAction)
  User       User      @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([id_user, id_movie])
  @@index([id_movie, id_user])
}

model Movie_Actor {
  id_movie   Int
  id_actor   Int
  role       String?   @db.VarChar(100) // tipo de rol (ej: "Actor", "Actress")
  character  String?   @db.VarChar(200) // nombre del personaje
  order      Int? // orden en los créditos
  created_at DateTime? @default(now()) @db.Timestamp(6)

  Actor Actor @relation(fields: [id_actor], references: [id_actor], onDelete: NoAction, onUpdate: NoAction)
  Movie Movie @relation(fields: [id_movie], references: [id_movie], onDelete: NoAction, onUpdate: NoAction)

  @@id([id_movie, id_actor])
  @@index([role])
}

model Review {
  id_review   Int       @id @default(autoincrement())
  id_user     String
  id_movie    Int
  score       Decimal? @db.Decimal(3, 2) // puntuación del usuario (0-5)
  comment     String?
  review_date DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  Movie       Movie     @relation(fields: [id_movie], references: [id_movie], onDelete: NoAction, onUpdate: NoAction)
  User        User      @relation(fields: [id_user], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([id_user, id_movie], map: "Review_id_user_id_movie_idx")
}


// model Comment {
//   id              Int        @id @default(autoincrement())
//   text            String
//   createdAt       DateTime   @default(now())
//   updatedAt       DateTime   @updatedAt

//   // Relaciones
//   review          Review     @relation(fields: [reviewId], references: [id])
//   reviewId        Int

//   author          User?      @relation(fields: [authorId], references: [id])
//   authorId        Int?

//   parentComment   Comment?   @relation("CommentReplies", fields: [parentCommentId], references: [id])
//   parentCommentId Int?

//   replies         Comment[]  @relation("CommentReplies") // hijos

//   votes           CommentVote[]
// }

// PARA AD LIKE DISLIKE

// model CommentVote {
//   id         Int      @id @default(autoincrement())
//   comment    Comment  @relation(fields: [commentId], references: [id])
//   commentId  Int

//   user       User     @relation(fields: [userId], references: [id])
//   userId     Int

//   value      Int      // 1 para like, -1 para dislike

//   createdAt  DateTime @default(now())

//   @@unique([commentId, userId]) // un voto por usuario por comentario
// }



model User {
  id            String     @id @default(cuid())
  name          String     @db.VarChar(100)
  email         String     @unique(map: "User_email_idx") @db.VarChar(255)
  password      String     @db.VarChar(255) // Hash de la contraseña
  birth_date    DateTime?  @db.Date
  role          UserRole   @default(USER)
  isActive      Boolean    @default(true)
  emailVerified Boolean    @default(false)
  image         String?
  created_at    DateTime   @default(now()) @db.Timestamp(6)
  updated_at    DateTime   @updatedAt @db.Timestamp(6)
  
  // Relaciones existentes
  Favorite      Favorite[]
  Review        Review[]

  @@map("user")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}